{
  "name": "Santos_Cleaning_Reviews_Enhanced",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "cronExpression": "0 6 * * *"
            }
          ]
        }
      },
      "id": "1e125fdf-0867-4524-ad03-8e39af3083d7",
      "name": "Daily 6AM Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [-620, -40]
    },
    {
      "parameters": {
        "url": "https://maps.googleapis.com/maps/api/place/details/json",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "place_id",
              "value": "ChIJtUAkWzIR9YgRXn8fIRml4gk"
            },
            {
              "name": "fields",
              "value": "reviews,rating,user_ratings_total,name"
            },
            {
              "name": "key",
              "value": "AIzaSyAFGyJq3Ss7jCd1yTeU4b6jATL0Hs0m1ko"
            },
            {
              "name": "reviews_sort",
              "value": "newest"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "a7efa01d-1dee-45e8-bf7c-a8a63ac54561",
      "name": "Fetch Google Reviews",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [-420, -40]
    },
    {
      "parameters": {
        "jsCode": "console.log('üîç Dados recebidos do Google:', JSON.stringify($input.all(), null, 2));\n\nconst responseData = $input.all()[0].json;\n\n// Verificar se a resposta est√° OK\nif (responseData.status !== 'OK') {\n  console.error('‚ùå Erro na API Google:', responseData.status, responseData.error_message);\n  return {\n    success: false,\n    error: `Google API Error: ${responseData.status} - ${responseData.error_message || 'Unknown error'}`,\n    total_reviews: 0,\n    reviews: []\n  };\n}\n\n// Extrair reviews\nconst result = responseData.result;\nconst allReviews = result.reviews || [];\n\nconsole.log(`üìä Total de reviews recebidos: ${allReviews.length}`);\n\n// Filtrar apenas reviews de 5 estrelas e mais recentes\nconst fiveStarReviews = allReviews\n  .filter(review => review.rating === 5)\n  .sort((a, b) => b.time - a.time) // Ordenar por mais recente\n  .slice(0, 10); // Pegar os 10 mais recentes\n\nconsole.log(`‚≠ê Reviews de 5 estrelas encontrados: ${fiveStarReviews.length}`);\n\n// Processar e formatar reviews\nconst processedReviews = fiveStarReviews.map((review, index) => {\n  console.log(`üîÑ Processando review ${index + 1}:`, {\n    author: review.author_name,\n    rating: review.rating,\n    hasPhoto: !!review.profile_photo_url,\n    photoUrl: review.profile_photo_url\n  });\n\n  return {\n    review_id: `google_${review.time}_${review.author_name.replace(/\\s+/g, '_').toLowerCase()}`,\n    author_name: review.author_name,\n    rating: review.rating,\n    text: review.text,\n    review_time: new Date(review.time * 1000).toISOString(),\n    relative_time_description: review.relative_time_description,\n    // PRESERVAR FOTO REAL DO GOOGLE ou usar fallback\n    profile_photo_url: review.profile_photo_url || \n      `https://ui-avatars.com/api/?name=${encodeURIComponent(review.author_name)}&background=4285F4&color=fff&size=128&font-size=0.6&bold=true`,\n    language: review.language || 'en',\n    source: 'google_places'\n  };\n});\n\nconsole.log('‚úÖ Reviews processados:', processedReviews.length);\nconsole.log('üì∏ Reviews com fotos reais:', processedReviews.filter(r => !r.profile_photo_url.includes('ui-avatars')).length);\n\nreturn {\n  success: true,\n  total_reviews: processedReviews.length,\n  business_name: result.name,\n  overall_rating: result.rating,\n  total_ratings: result.user_ratings_total,\n  reviews: processedReviews\n};"
      },
      "id": "b2e1c3d4-5f6a-7b8c-9d0e-1f2a3b4c5d6e",
      "name": "Process Review Data Enhanced",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-220, -40]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition_1",
              "leftValue": "={{ $json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            },
            {
              "id": "condition_2", 
              "leftValue": "={{ $json.total_reviews }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "larger"
              }
            },
            {
              "id": "condition_3",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isEmpty"
              }
            }
          ],
          "combineOperation": "all"
        }
      },
      "id": "c3f4d5e6-7g8h-9i0j-1k2l-3m4n5o6p7q8r",
      "name": "Check Success Enhanced",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [-20, -40]
    },
    {
      "parameters": {
        "url": "http://54.67.60.88/api/webhook/reviews-update",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "d4e5f6g7-8h9i-0j1k-2l3m-4n5o6p7q8r9s",
      "name": "Send to Website Enhanced",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [180, -140]
    },
    {
      "parameters": {
        "jsCode": "console.log('‚úÖ SUCESSO! Reviews enviados para o website!');\nconsole.log('üìä Resposta do webhook:', JSON.stringify($input.all(), null, 2));\n\nconst webhookResponse = $input.all()[0];\nconsole.log(`üéØ Status: ${webhookResponse.json?.status || 'unknown'}`);\nconsole.log(`üìù Mensagem: ${webhookResponse.json?.message || 'no message'}`);\n\nreturn { \n  workflow_status: 'completed',\n  timestamp: new Date().toISOString(),\n  webhook_response: webhookResponse.json\n};"
      },
      "id": "e5f6g7h8-9i0j-1k2l-3m4n-5o6p7q8r9s0t",
      "name": "Log Success Enhanced",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [380, -140]
    },
    {
      "parameters": {
        "jsCode": "console.log('‚ùå ERRO! Workflow interrompido.');\nconsole.log('üìä Dados recebidos:', JSON.stringify($input.all(), null, 2));\n\nconst data = $input.all()[0].json;\n\nconst reasons = [];\nif (!data.success) reasons.push('‚ùå Success = false');\nif (data.total_reviews <= 0) reasons.push('üìä Nenhum review encontrado');\nif (data.error) reasons.push(`üö® Erro: ${data.error}`);\n\nconsole.log('üîç Raz√µes para interrup√ß√£o:', reasons.join(', '));\n\nreturn {\n  workflow_status: 'failed',\n  timestamp: new Date().toISOString(),\n  reasons: reasons,\n  data_received: data\n};"
      },
      "id": "f6g7h8i9-0j1k-2l3m-4n5o-6p7q8r9s0t1u",
      "name": "Log Error Enhanced",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [180, 60]
    }
  ],
  "connections": {
    "Daily 6AM Trigger": {
      "main": [
        [
          {
            "node": "Fetch Google Reviews",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Google Reviews": {
      "main": [
        [
          {
            "node": "Process Review Data Enhanced",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Review Data Enhanced": {
      "main": [
        [
          {
            "node": "Check Success Enhanced",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Success Enhanced": {
      "main": [
        [
          {
            "node": "Send to Website Enhanced",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Error Enhanced",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to Website Enhanced": {
      "main": [
        [
          {
            "node": "Log Success Enhanced",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "enhanced-v1"
} 