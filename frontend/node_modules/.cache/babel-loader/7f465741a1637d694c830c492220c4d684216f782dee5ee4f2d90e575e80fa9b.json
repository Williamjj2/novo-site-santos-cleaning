{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_BACKEND_URL||'http://localhost:8001';// Create axios instance with default config\nconst api=axios.create({baseURL:API_BASE_URL,timeout:10000,headers:{'Content-Type':'application/json'}});// Request interceptor for debugging (only in development)\nif(process.env.NODE_ENV==='development'){api.interceptors.request.use(config=>{var _config$method;console.log('API Request:',(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),config.url);return config;},error=>{console.error('API Request Error:',error);return Promise.reject(error);});}// Response interceptor for error handling\napi.interceptors.response.use(response=>{if(process.env.NODE_ENV==='development'){console.log('API Response:',response.status,response.config.url);}return response;},error=>{var _error$response,_error$config,_error$response2,_error$response3;console.error('API Response Error:',(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,(_error$config=error.config)===null||_error$config===void 0?void 0:_error$config.url,error.message);// Handle common errors\nif(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===404){console.error('API endpoint not found');}else if(((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)>=500){console.error('Server error');}else if(error.code==='ECONNABORTED'){console.error('Request timeout');}return Promise.reject(error);});// API functions\nexport const apiService={// Health check\nasync healthCheck(){try{const response=await api.get('/api/health');return response.data;}catch(error){console.error('Health check failed:',error);throw error;}},// Contact form submission\nasync submitContact(contactData){try{const response=await api.post('/api/contact',contactData);return response.data;}catch(error){console.error('Contact submission failed:',error);throw error;}},// Get reviews\nasync getReviews(){try{const response=await api.get('/api/reviews');return response.data;}catch(error){console.error('Failed to fetch reviews:',error);// Return fallback data on error\nreturn{reviews:[{author_name:\"Maria Rodriguez\",rating:5,text:\"Santos Cleaning Solutions exceeded all my expectations! Karen and William are incredibly professional and detail-oriented.\",relative_time_description:\"2 weeks ago\",profile_photo_url:\"https://ui-avatars.com/api/?name=Maria+Rodriguez&background=4285F4&color=fff&size=128&font-size=0.6&bold=true\"},{author_name:\"John Smith\",rating:5,text:\"Best cleaning service in Marietta! They pay attention to every detail and are incredibly reliable.\",relative_time_description:\"1 month ago\",profile_photo_url:\"https://ui-avatars.com/api/?name=John+Smith&background=34A853&color=fff&size=128&font-size=0.6&bold=true\"}]};}},// Get services\nasync getServices(){try{const response=await api.get('/api/services');return response.data;}catch(error){console.error('Failed to fetch services:',error);throw error;}},// Create booking\nasync createBooking(bookingData){try{const response=await api.post('/api/bookings',bookingData);return response.data;}catch(error){console.error('Booking creation failed:',error);throw error;}},// Add review\nasync addReview(reviewData){try{const response=await api.post('/api/reviews',reviewData);return response.data;}catch(error){console.error('Review submission failed:',error);throw error;}}};export default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_BACKEND_URL","api","create","baseURL","timeout","headers","NODE_ENV","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","_error$config","_error$response2","_error$response3","message","code","apiService","healthCheck","get","data","submitContact","contactData","post","getReviews","reviews","author_name","rating","text","relative_time_description","profile_photo_url","getServices","createBooking","bookingData","addReview","reviewData"],"sources":["/Users/williamjesus/Documents/novo-site-santos-cleaning/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor for debugging (only in development)\nif (process.env.NODE_ENV === 'development') {\n  api.interceptors.request.use(\n    (config) => {\n      console.log('API Request:', config.method?.toUpperCase(), config.url);\n      return config;\n    },\n    (error) => {\n      console.error('API Request Error:', error);\n      return Promise.reject(error);\n    }\n  );\n}\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log('API Response:', response.status, response.config.url);\n    }\n    return response;\n  },\n  (error) => {\n    console.error('API Response Error:', error.response?.status, error.config?.url, error.message);\n    \n    // Handle common errors\n    if (error.response?.status === 404) {\n      console.error('API endpoint not found');\n    } else if (error.response?.status >= 500) {\n      console.error('Server error');\n    } else if (error.code === 'ECONNABORTED') {\n      console.error('Request timeout');\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// API functions\nexport const apiService = {\n  // Health check\n  async healthCheck() {\n    try {\n      const response = await api.get('/api/health');\n      return response.data;\n    } catch (error) {\n      console.error('Health check failed:', error);\n      throw error;\n    }\n  },\n\n  // Contact form submission\n  async submitContact(contactData) {\n    try {\n      const response = await api.post('/api/contact', contactData);\n      return response.data;\n    } catch (error) {\n      console.error('Contact submission failed:', error);\n      throw error;\n    }\n  },\n\n  // Get reviews\n  async getReviews() {\n    try {\n      const response = await api.get('/api/reviews');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch reviews:', error);\n      // Return fallback data on error\n      return {\n        reviews: [\n          {\n            author_name: \"Maria Rodriguez\",\n            rating: 5,\n            text: \"Santos Cleaning Solutions exceeded all my expectations! Karen and William are incredibly professional and detail-oriented.\",\n            relative_time_description: \"2 weeks ago\",\n            profile_photo_url: \"https://ui-avatars.com/api/?name=Maria+Rodriguez&background=4285F4&color=fff&size=128&font-size=0.6&bold=true\"\n          },\n          {\n            author_name: \"John Smith\",\n            rating: 5,\n            text: \"Best cleaning service in Marietta! They pay attention to every detail and are incredibly reliable.\",\n            relative_time_description: \"1 month ago\",\n            profile_photo_url: \"https://ui-avatars.com/api/?name=John+Smith&background=34A853&color=fff&size=128&font-size=0.6&bold=true\"\n          }\n        ]\n      };\n    }\n  },\n\n  // Get services\n  async getServices() {\n    try {\n      const response = await api.get('/api/services');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch services:', error);\n      throw error;\n    }\n  },\n\n  // Create booking\n  async createBooking(bookingData) {\n    try {\n      const response = await api.post('/api/bookings', bookingData);\n      return response.data;\n    } catch (error) {\n      console.error('Booking creation failed:', error);\n      throw error;\n    }\n  },\n\n  // Add review\n  async addReview(reviewData) {\n    try {\n      const response = await api.post('/api/reviews', reviewData);\n      return response.data;\n    } catch (error) {\n      console.error('Review submission failed:', error);\n      throw error;\n    }\n  }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}